const { Schema, model } = require('mongoose');

const BFOSchema = new Schema({
  actives: { type: String, requires: false },
  actualBfoDate: { type: String, requires: false },
  actualCorrectionDate: String,
  actualCorrectionNumber: Number,
  auditReport: { type: String, requires: false },
  azFlg: Boolean,
  clarification: { type: String, requires: false },
  gainSum: Number,
  id: Number,
  isCb: { type: String, requires: false },
  knd: String,
  period: String,
  publication: Number,
  published: Boolean,
  publishedCorrectionDate: { type: String, requires: false },
  publishedCorrectionNumber: { type: String, requires: false },
});

const DataRowSchema = new Schema({
  '2017': { type: Number, requires: false },
  '2018': { type: Number, requires: false },
  '2019': { type: Number, requires: false },
  '2020': { type: Number, requires: false },
  id: String,
  column: String,
});

const SearchSchema = new Schema({
  content: [
    {
      active: { type: Boolean, requires: false },
      bfo: [BFOSchema],
      building: { type: String, requires: false },
      city: { type: String, requires: false },
      district: { type: String, requires: false },
      house: String,
      id: Number,
      index: String,
      inn: String,
      office: String,
      ogrn: String,
      okato: { type: String, requires: false },
      okfs: { id: Number, name: String },
      okopf: { id: Number, name: String },
      okpo: String,
      okved: { type: String, requires: false },
      okved2: { id: String, name: String },
      primary: { type: Boolean, requires: false },
      region: String,
      score: Number,
      settlement: { type: String, requires: false },
      shortName: String,
    },
  ],
  pageable: {
    sort: {
      empty: { type: Boolean, requires: false },
      sorted: { type: Boolean, requires: false },
      unsorted: { type: Boolean, requires: false },
    },
    pageNumber: Number,
    pageSize: Number,
    offset: Number,
    unpaged: { type: Boolean, requires: false },
    paged: { type: Boolean, requires: false },
  },
  facets: [],
  aggregations: { type: String, requires: false },
  scrollId: { type: String, requires: false },
  maxScore: String,
  totalPages: Number,
  totalElements: Number,
  sort: {
    unsorted: Boolean,
    sorted: Boolean,
    empty: Boolean,
  },
  numberOfElements: Number,
  first: { type: Boolean, requires: false },
  last: { type: Boolean, requires: false },
  size: Number,
  number: Number,
  empty: { type: Boolean, requires: false },
});

const BasicInfoSchema = new Schema({
  id: Number,
  inn: String,
  shortName: String,
  ogrn: String,
  index: String,
  region: String,
  district: { type: String, requires: false },
  city: { type: String, requires: false },
  settlement: { type: String, requires: false },
  street: String,
  house: String,
  building: { type: String, requires: false },
  office: String,
  active: { type: Boolean, requires: false },
  primary: { type: Boolean, requires: false },
  okved: { type: String, requires: false },
  okved2: { id: String, name: String },
  okopf: { id: Number, name: String },
  okfs: { id: Number, name: String },
  bfo: [BFOSchema],
  okpo: String,
  okato: { type: String, requires: false },
  kpp: String,
  fullName: String,
  registrationDate: String,
  location: {
    id: Number,
    name: String,
    code: Number,
    latitude: Number,
    longitude: Number,
    type: Number,
    parentId: Number,
  },
  authorizedCapital: Number,
});

const DetailsSchema = new Schema({
  id: Number,
  balance: {},
  financialResult: {},
  capitalChange: {},
  fundsMovement: {},
  auditInn: String,
  auditName: String,
  auditOgrn: String,
  datePresent: String,
  period: String,
});

export const ServiceResultSchema = new Schema({
  inn: String,
  search: SearchSchema,
  basicInfo: BasicInfoSchema,
  rowDetails: { type: Schema.Types.Mixed, required: false },
  details: DetailsSchema,
});

export const ServiceModel = model('Service', ServiceResultSchema);
